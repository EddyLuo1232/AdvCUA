{"ast":null,"code":"var _jsxFileName = \"/Users/eddy/AdvCUA_page/src/components/DigitalRainBackground.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DigitalFlickerContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: -1;\n  overflow: hidden;\n`;\n_c = DigitalFlickerContainer;\nconst DigitalFlickerCanvas = styled.canvas`\n  width: 100%;\n  height: 100%;\n  opacity: 0.4;\n`;\n_c2 = DigitalFlickerCanvas;\nexport const DigitalRainBackground = ({\n  density = 0.02,\n  flickerSpeed = 0.05\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const animationRef = useRef(null);\n  const charactersRef = useRef([]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Digital characters including binary, hex, and special chars\n    const binaryChars = '01';\n    const hexChars = '0123456789ABCDEF';\n    const specialChars = '@#$%^&*()_+-=[]{}|;:,.<>?~`';\n    const fontSize = 16;\n    const colors = ['#4fc3f7',\n    // Primary blue\n    '#7c4dff',\n    // Purple\n    '#00bcd4',\n    // Cyan\n    '#81c784' // Light green accent\n    ];\n\n    // Set canvas size and initialize characters\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n      initializeCharacters();\n    };\n\n    // Generate random character with weighted selection\n    const getRandomChar = () => {\n      const rand = Math.random();\n      if (rand < 0.6) return binaryChars[Math.floor(Math.random() * binaryChars.length)];\n      if (rand < 0.8) return hexChars[Math.floor(Math.random() * hexChars.length)];\n      return specialChars[Math.floor(Math.random() * specialChars.length)];\n    };\n\n    // Initialize characters across the screen\n    const initializeCharacters = () => {\n      charactersRef.current = [];\n      const cols = Math.floor(canvas.width / fontSize);\n      const rows = Math.floor(canvas.height / fontSize);\n      for (let x = 0; x < cols; x++) {\n        for (let y = 0; y < rows; y++) {\n          if (Math.random() < density) {\n            charactersRef.current.push({\n              x: x * fontSize,\n              y: y * fontSize,\n              char: getRandomChar(),\n              opacity: 0,\n              brightness: Math.random() * 0.8 + 0.2,\n              flickerSpeed: Math.random() * flickerSpeed + flickerSpeed * 0.5,\n              glitchChance: Math.random() * 0.05 + 0.01,\n              phase: Math.random() * Math.PI * 2,\n              maxOpacity: Math.random() * 0.8 + 0.2,\n              color: colors[Math.floor(Math.random() * colors.length)],\n              lastChange: 0\n            });\n          }\n        }\n      }\n    };\n\n    // Animation loop\n    const animate = currentTime => {\n      // Clear canvas completely for clean flicker effect\n      ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.font = `${fontSize}px JetBrains Mono, monospace`;\n      charactersRef.current.forEach(char => {\n        // Update flicker phase\n        char.phase += char.flickerSpeed;\n\n        // Calculate flickering opacity using sine wave\n        const flicker = (Math.sin(char.phase) + 1) / 2;\n        char.opacity = char.maxOpacity * flicker * char.brightness;\n\n        // Random character glitching\n        if (Math.random() < char.glitchChance) {\n          char.char = getRandomChar();\n          // Sometimes change color on glitch\n          if (Math.random() < 0.3) {\n            char.color = colors[Math.floor(Math.random() * colors.length)];\n          }\n        }\n\n        // Random position glitch for some characters\n        let drawX = char.x;\n        let drawY = char.y;\n        if (Math.random() < 0.01) {\n          drawX += (Math.random() - 0.5) * 4;\n          drawY += (Math.random() - 0.5) * 4;\n        }\n\n        // Only draw if visible\n        if (char.opacity > 0.05) {\n          // Add glow effect for bright characters\n          if (char.opacity > 0.6) {\n            ctx.shadowColor = char.color;\n            ctx.shadowBlur = 8;\n          } else if (char.opacity > 0.3) {\n            ctx.shadowColor = char.color;\n            ctx.shadowBlur = 4;\n          } else {\n            ctx.shadowBlur = 0;\n          }\n\n          // Set color with opacity\n          const hex = char.color.replace('#', '');\n          const r = parseInt(hex.substr(0, 2), 16);\n          const g = parseInt(hex.substr(2, 2), 16);\n          const b = parseInt(hex.substr(4, 2), 16);\n          ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${char.opacity})`;\n          ctx.fillText(char.char, drawX, drawY + fontSize);\n        }\n\n        // Randomly spawn new characters or remove old ones\n        if (Math.random() < 0.001) {\n          char.phase = 0;\n          char.maxOpacity = Math.random() * 0.8 + 0.2;\n          char.flickerSpeed = Math.random() * flickerSpeed + flickerSpeed * 0.5;\n        }\n      });\n\n      // Reset shadow\n      ctx.shadowBlur = 0;\n\n      // Randomly add new characters\n      if (Math.random() < 0.02) {\n        const cols = Math.floor(canvas.width / fontSize);\n        const rows = Math.floor(canvas.height / fontSize);\n        const newX = Math.floor(Math.random() * cols) * fontSize;\n        const newY = Math.floor(Math.random() * rows) * fontSize;\n        charactersRef.current.push({\n          x: newX,\n          y: newY,\n          char: getRandomChar(),\n          opacity: 0,\n          brightness: Math.random() * 0.8 + 0.2,\n          flickerSpeed: Math.random() * flickerSpeed + flickerSpeed * 0.5,\n          glitchChance: Math.random() * 0.05 + 0.01,\n          phase: 0,\n          maxOpacity: Math.random() * 0.8 + 0.2,\n          color: colors[Math.floor(Math.random() * colors.length)],\n          lastChange: currentTime\n        });\n      }\n\n      // Remove excess characters for performance\n      if (charactersRef.current.length > 1000) {\n        charactersRef.current = charactersRef.current.slice(0, 800);\n      }\n      animationRef.current = requestAnimationFrame(animate);\n    };\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n    animationRef.current = requestAnimationFrame(animate);\n    return () => {\n      window.removeEventListener('resize', resizeCanvas);\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [density, flickerSpeed]);\n  return /*#__PURE__*/_jsxDEV(DigitalFlickerContainer, {\n    children: /*#__PURE__*/_jsxDEV(DigitalFlickerCanvas, {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this);\n};\n_s(DigitalRainBackground, \"MDP/ZpCu9OmVGrXanHQ97iRLiCc=\");\n_c3 = DigitalRainBackground;\nexport default DigitalRainBackground;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"DigitalFlickerContainer\");\n$RefreshReg$(_c2, \"DigitalFlickerCanvas\");\n$RefreshReg$(_c3, \"DigitalRainBackground\");","map":{"version":3,"names":["React","useEffect","useRef","styled","jsxDEV","_jsxDEV","DigitalFlickerContainer","div","_c","DigitalFlickerCanvas","canvas","_c2","DigitalRainBackground","density","flickerSpeed","_s","canvasRef","animationRef","charactersRef","current","ctx","getContext","binaryChars","hexChars","specialChars","fontSize","colors","resizeCanvas","width","window","innerWidth","height","innerHeight","initializeCharacters","getRandomChar","rand","Math","random","floor","length","cols","rows","x","y","push","char","opacity","brightness","glitchChance","phase","PI","maxOpacity","color","lastChange","animate","currentTime","fillStyle","fillRect","font","forEach","flicker","sin","drawX","drawY","shadowColor","shadowBlur","hex","replace","r","parseInt","substr","g","b","fillText","newX","newY","slice","requestAnimationFrame","addEventListener","removeEventListener","cancelAnimationFrame","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["/Users/eddy/AdvCUA_page/src/components/DigitalRainBackground.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\n\nconst DigitalFlickerContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: -1;\n  overflow: hidden;\n`;\n\nconst DigitalFlickerCanvas = styled.canvas`\n  width: 100%;\n  height: 100%;\n  opacity: 0.4;\n`;\n\ninterface DigitalCharacter {\n  x: number;\n  y: number;\n  char: string;\n  opacity: number;\n  brightness: number;\n  flickerSpeed: number;\n  glitchChance: number;\n  phase: number;\n  maxOpacity: number;\n  color: string;\n  lastChange: number;\n}\n\ninterface DigitalFlickerBackgroundProps {\n  density?: number;\n  flickerSpeed?: number;\n}\n\nexport const DigitalRainBackground: React.FC<DigitalFlickerBackgroundProps> = ({ \n  density = 0.02, \n  flickerSpeed = 0.05 \n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const animationRef = useRef<number | null>(null);\n  const charactersRef = useRef<DigitalCharacter[]>([]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Digital characters including binary, hex, and special chars\n    const binaryChars = '01';\n    const hexChars = '0123456789ABCDEF';\n    const specialChars = '@#$%^&*()_+-=[]{}|;:,.<>?~`';\n    \n    const fontSize = 16;\n    const colors = [\n      '#4fc3f7', // Primary blue\n      '#7c4dff', // Purple\n      '#00bcd4', // Cyan\n      '#81c784', // Light green accent\n    ];\n\n    // Set canvas size and initialize characters\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n      initializeCharacters();\n    };\n\n    // Generate random character with weighted selection\n    const getRandomChar = () => {\n      const rand = Math.random();\n      if (rand < 0.6) return binaryChars[Math.floor(Math.random() * binaryChars.length)];\n      if (rand < 0.8) return hexChars[Math.floor(Math.random() * hexChars.length)];\n      return specialChars[Math.floor(Math.random() * specialChars.length)];\n    };\n\n    // Initialize characters across the screen\n    const initializeCharacters = () => {\n      charactersRef.current = [];\n      const cols = Math.floor(canvas.width / fontSize);\n      const rows = Math.floor(canvas.height / fontSize);\n\n      for (let x = 0; x < cols; x++) {\n        for (let y = 0; y < rows; y++) {\n          if (Math.random() < density) {\n            charactersRef.current.push({\n              x: x * fontSize,\n              y: y * fontSize,\n              char: getRandomChar(),\n              opacity: 0,\n              brightness: Math.random() * 0.8 + 0.2,\n              flickerSpeed: Math.random() * flickerSpeed + flickerSpeed * 0.5,\n              glitchChance: Math.random() * 0.05 + 0.01,\n              phase: Math.random() * Math.PI * 2,\n              maxOpacity: Math.random() * 0.8 + 0.2,\n              color: colors[Math.floor(Math.random() * colors.length)],\n              lastChange: 0,\n            });\n          }\n        }\n      }\n    };\n\n    // Animation loop\n    const animate = (currentTime: number) => {\n      // Clear canvas completely for clean flicker effect\n      ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      ctx.font = `${fontSize}px JetBrains Mono, monospace`;\n\n      charactersRef.current.forEach(char => {\n        // Update flicker phase\n        char.phase += char.flickerSpeed;\n        \n        // Calculate flickering opacity using sine wave\n        const flicker = (Math.sin(char.phase) + 1) / 2;\n        char.opacity = char.maxOpacity * flicker * char.brightness;\n\n        // Random character glitching\n        if (Math.random() < char.glitchChance) {\n          char.char = getRandomChar();\n          // Sometimes change color on glitch\n          if (Math.random() < 0.3) {\n            char.color = colors[Math.floor(Math.random() * colors.length)];\n          }\n        }\n\n        // Random position glitch for some characters\n        let drawX = char.x;\n        let drawY = char.y;\n        if (Math.random() < 0.01) {\n          drawX += (Math.random() - 0.5) * 4;\n          drawY += (Math.random() - 0.5) * 4;\n        }\n\n        // Only draw if visible\n        if (char.opacity > 0.05) {\n          // Add glow effect for bright characters\n          if (char.opacity > 0.6) {\n            ctx.shadowColor = char.color;\n            ctx.shadowBlur = 8;\n          } else if (char.opacity > 0.3) {\n            ctx.shadowColor = char.color;\n            ctx.shadowBlur = 4;\n          } else {\n            ctx.shadowBlur = 0;\n          }\n\n          // Set color with opacity\n          const hex = char.color.replace('#', '');\n          const r = parseInt(hex.substr(0, 2), 16);\n          const g = parseInt(hex.substr(2, 2), 16);\n          const b = parseInt(hex.substr(4, 2), 16);\n          \n          ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${char.opacity})`;\n          ctx.fillText(char.char, drawX, drawY + fontSize);\n        }\n\n        // Randomly spawn new characters or remove old ones\n        if (Math.random() < 0.001) {\n          char.phase = 0;\n          char.maxOpacity = Math.random() * 0.8 + 0.2;\n          char.flickerSpeed = Math.random() * flickerSpeed + flickerSpeed * 0.5;\n        }\n      });\n\n      // Reset shadow\n      ctx.shadowBlur = 0;\n\n      // Randomly add new characters\n      if (Math.random() < 0.02) {\n        const cols = Math.floor(canvas.width / fontSize);\n        const rows = Math.floor(canvas.height / fontSize);\n        const newX = Math.floor(Math.random() * cols) * fontSize;\n        const newY = Math.floor(Math.random() * rows) * fontSize;\n        \n        charactersRef.current.push({\n          x: newX,\n          y: newY,\n          char: getRandomChar(),\n          opacity: 0,\n          brightness: Math.random() * 0.8 + 0.2,\n          flickerSpeed: Math.random() * flickerSpeed + flickerSpeed * 0.5,\n          glitchChance: Math.random() * 0.05 + 0.01,\n          phase: 0,\n          maxOpacity: Math.random() * 0.8 + 0.2,\n          color: colors[Math.floor(Math.random() * colors.length)],\n          lastChange: currentTime,\n        });\n      }\n\n      // Remove excess characters for performance\n      if (charactersRef.current.length > 1000) {\n        charactersRef.current = charactersRef.current.slice(0, 800);\n      }\n\n      animationRef.current = requestAnimationFrame(animate);\n    };\n\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n    animationRef.current = requestAnimationFrame(animate);\n\n    return () => {\n      window.removeEventListener('resize', resizeCanvas);\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [density, flickerSpeed]);\n\n  return (\n    <DigitalFlickerContainer>\n      <DigitalFlickerCanvas ref={canvasRef} />\n    </DigitalFlickerContainer>\n  );\n};\n\nexport default DigitalRainBackground;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}