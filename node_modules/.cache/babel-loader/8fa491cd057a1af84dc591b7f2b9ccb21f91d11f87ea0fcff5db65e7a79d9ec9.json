{"ast":null,"code":"var _jsxFileName = \"/Users/eddy/AdvCUA_page/attack-demo/src/components/DigitalRainBackground.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DigitalFlickerContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: -1;\n  overflow: hidden;\n`;\nconst DigitalFlickerCanvas = styled.canvas`\n  width: 100%;\n  height: 100%;\n  opacity: 0.4;\n`;\nexport const DigitalRainBackground = ({\n  density = 0.95,\n  speed = 1\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const animationRef = useRef(null);\n  const columnsRef = useRef([]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Digital characters including binary, hex, and special chars\n    const digitalChars = '01ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%^&*()_+-=[]{}|;:,.<>?~`';\n    const binaryChars = '01';\n    const hexChars = '0123456789ABCDEF';\n    const fontSize = 14;\n    let columns = 0;\n\n    // Set canvas size and initialize columns\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n      columns = Math.floor(canvas.width / fontSize);\n      initializeColumns();\n    };\n\n    // Initialize column data\n    const initializeColumns = () => {\n      columnsRef.current = [];\n      for (let i = 0; i < columns; i++) {\n        columnsRef.current.push({\n          characters: [],\n          lastUpdate: 0,\n          speed: Math.random() * speed + 0.5\n        });\n      }\n    };\n\n    // Generate random character with weighted selection\n    const getRandomChar = () => {\n      const rand = Math.random();\n      if (rand < 0.4) return binaryChars[Math.floor(Math.random() * binaryChars.length)];\n      if (rand < 0.7) return hexChars[Math.floor(Math.random() * hexChars.length)];\n      return digitalChars[Math.floor(Math.random() * digitalChars.length)];\n    };\n\n    // Animation loop\n    const animate = currentTime => {\n      // Black background with slight transparency for trail effect\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.font = `${fontSize}px JetBrains Mono, monospace`;\n      columnsRef.current.forEach((column, columnIndex) => {\n        const x = columnIndex * fontSize;\n\n        // Add new characters at the top\n        if (Math.random() > density) {\n          const newChar = {\n            x,\n            y: 0,\n            char: getRandomChar(),\n            opacity: 1,\n            speed: column.speed,\n            brightness: Math.random() * 0.5 + 0.5,\n            glitchChance: Math.random() * 0.1\n          };\n          column.characters.unshift(newChar);\n        }\n\n        // Update and draw characters\n        column.characters = column.characters.filter((char, index) => {\n          // Move character down\n          char.y += char.speed;\n\n          // Fade out older characters\n          if (index > 0) {\n            char.opacity *= 0.98;\n            char.brightness *= 0.99;\n          }\n\n          // Random character glitching\n          if (Math.random() < char.glitchChance) {\n            char.char = getRandomChar();\n          }\n\n          // Calculate color based on position and brightness\n          let color;\n          if (index === 0) {\n            // Leading character - brightest blue\n            color = `rgba(79, 195, 247, ${char.opacity})`;\n          } else if (index < 3) {\n            // Near leading characters - bright blue\n            color = `rgba(79, 195, 247, ${char.opacity * char.brightness * 0.8})`;\n          } else if (index < 8) {\n            // Middle characters - cyan blue\n            color = `rgba(0, 188, 212, ${char.opacity * char.brightness * 0.6})`;\n          } else {\n            // Trailing characters - darker blue\n            color = `rgba(124, 77, 255, ${char.opacity * char.brightness * 0.4})`;\n          }\n\n          // Add glow effect for leading characters\n          if (index === 0) {\n            ctx.shadowColor = '#4fc3f7';\n            ctx.shadowBlur = 10;\n          } else if (index < 3) {\n            ctx.shadowColor = '#4fc3f7';\n            ctx.shadowBlur = 5;\n          } else {\n            ctx.shadowBlur = 0;\n          }\n          ctx.fillStyle = color;\n          ctx.fillText(char.char, char.x, char.y);\n\n          // Remove characters that are off screen or too faded\n          return char.y < canvas.height + fontSize && char.opacity > 0.01;\n        });\n\n        // Limit character count per column for performance\n        if (column.characters.length > 50) {\n          column.characters = column.characters.slice(0, 50);\n        }\n      });\n\n      // Reset shadow\n      ctx.shadowBlur = 0;\n      animationRef.current = requestAnimationFrame(animate);\n    };\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n    animationRef.current = requestAnimationFrame(animate);\n    return () => {\n      window.removeEventListener('resize', resizeCanvas);\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [density, speed]);\n  return /*#__PURE__*/_jsxDEV(DigitalRainContainer, {\n    children: /*#__PURE__*/_jsxDEV(DigitalRainCanvas, {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n};\n_s(DigitalRainBackground, \"3S8lJlz6PADSTl9YZrIXKiOpwNc=\");\n_c = DigitalRainBackground;\nexport default DigitalRainBackground;\nvar _c;\n$RefreshReg$(_c, \"DigitalRainBackground\");","map":{"version":3,"names":["React","useEffect","useRef","styled","jsxDEV","_jsxDEV","DigitalFlickerContainer","div","DigitalFlickerCanvas","canvas","DigitalRainBackground","density","speed","_s","canvasRef","animationRef","columnsRef","current","ctx","getContext","digitalChars","binaryChars","hexChars","fontSize","columns","resizeCanvas","width","window","innerWidth","height","innerHeight","Math","floor","initializeColumns","i","push","characters","lastUpdate","random","getRandomChar","rand","length","animate","currentTime","fillStyle","fillRect","font","forEach","column","columnIndex","x","newChar","y","char","opacity","brightness","glitchChance","unshift","filter","index","color","shadowColor","shadowBlur","fillText","slice","requestAnimationFrame","addEventListener","removeEventListener","cancelAnimationFrame","DigitalRainContainer","children","DigitalRainCanvas","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/eddy/AdvCUA_page/attack-demo/src/components/DigitalRainBackground.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\n\nconst DigitalFlickerContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: -1;\n  overflow: hidden;\n`;\n\nconst DigitalFlickerCanvas = styled.canvas`\n  width: 100%;\n  height: 100%;\n  opacity: 0.4;\n`;\n\ninterface DigitalCharacter {\n  x: number;\n  y: number;\n  char: string;\n  opacity: number;\n  brightness: number;\n  flickerSpeed: number;\n  glitchChance: number;\n  phase: number;\n  maxOpacity: number;\n  color: string;\n  lastChange: number;\n}\n\ninterface DigitalFlickerBackgroundProps {\n  density?: number;\n  flickerSpeed?: number;\n}\n\nexport const DigitalRainBackground: React.FC<DigitalRainBackgroundProps> = ({ \n  density = 0.95, \n  speed = 1 \n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const animationRef = useRef<number | null>(null);\n  const columnsRef = useRef<Column[]>([]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Digital characters including binary, hex, and special chars\n    const digitalChars = '01ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%^&*()_+-=[]{}|;:,.<>?~`';\n    const binaryChars = '01';\n    const hexChars = '0123456789ABCDEF';\n    \n    const fontSize = 14;\n    let columns = 0;\n\n    // Set canvas size and initialize columns\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n      columns = Math.floor(canvas.width / fontSize);\n      initializeColumns();\n    };\n\n    // Initialize column data\n    const initializeColumns = () => {\n      columnsRef.current = [];\n      for (let i = 0; i < columns; i++) {\n        columnsRef.current.push({\n          characters: [],\n          lastUpdate: 0,\n          speed: Math.random() * speed + 0.5,\n        });\n      }\n    };\n\n    // Generate random character with weighted selection\n    const getRandomChar = () => {\n      const rand = Math.random();\n      if (rand < 0.4) return binaryChars[Math.floor(Math.random() * binaryChars.length)];\n      if (rand < 0.7) return hexChars[Math.floor(Math.random() * hexChars.length)];\n      return digitalChars[Math.floor(Math.random() * digitalChars.length)];\n    };\n\n    // Animation loop\n    const animate = (currentTime: number) => {\n      // Black background with slight transparency for trail effect\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      ctx.font = `${fontSize}px JetBrains Mono, monospace`;\n\n      columnsRef.current.forEach((column, columnIndex) => {\n        const x = columnIndex * fontSize;\n\n        // Add new characters at the top\n        if (Math.random() > density) {\n          const newChar: DigitalCharacter = {\n            x,\n            y: 0,\n            char: getRandomChar(),\n            opacity: 1,\n            speed: column.speed,\n            brightness: Math.random() * 0.5 + 0.5,\n            glitchChance: Math.random() * 0.1,\n          };\n          column.characters.unshift(newChar);\n        }\n\n        // Update and draw characters\n        column.characters = column.characters.filter((char, index) => {\n          // Move character down\n          char.y += char.speed;\n\n          // Fade out older characters\n          if (index > 0) {\n            char.opacity *= 0.98;\n            char.brightness *= 0.99;\n          }\n\n          // Random character glitching\n          if (Math.random() < char.glitchChance) {\n            char.char = getRandomChar();\n          }\n\n          // Calculate color based on position and brightness\n          let color: string;\n          if (index === 0) {\n            // Leading character - brightest blue\n            color = `rgba(79, 195, 247, ${char.opacity})`;\n          } else if (index < 3) {\n            // Near leading characters - bright blue\n            color = `rgba(79, 195, 247, ${char.opacity * char.brightness * 0.8})`;\n          } else if (index < 8) {\n            // Middle characters - cyan blue\n            color = `rgba(0, 188, 212, ${char.opacity * char.brightness * 0.6})`;\n          } else {\n            // Trailing characters - darker blue\n            color = `rgba(124, 77, 255, ${char.opacity * char.brightness * 0.4})`;\n          }\n\n          // Add glow effect for leading characters\n          if (index === 0) {\n            ctx.shadowColor = '#4fc3f7';\n            ctx.shadowBlur = 10;\n          } else if (index < 3) {\n            ctx.shadowColor = '#4fc3f7';\n            ctx.shadowBlur = 5;\n          } else {\n            ctx.shadowBlur = 0;\n          }\n\n          ctx.fillStyle = color;\n          ctx.fillText(char.char, char.x, char.y);\n\n          // Remove characters that are off screen or too faded\n          return char.y < canvas.height + fontSize && char.opacity > 0.01;\n        });\n\n        // Limit character count per column for performance\n        if (column.characters.length > 50) {\n          column.characters = column.characters.slice(0, 50);\n        }\n      });\n\n      // Reset shadow\n      ctx.shadowBlur = 0;\n\n      animationRef.current = requestAnimationFrame(animate);\n    };\n\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n    animationRef.current = requestAnimationFrame(animate);\n\n    return () => {\n      window.removeEventListener('resize', resizeCanvas);\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [density, speed]);\n\n  return (\n    <DigitalRainContainer>\n      <DigitalRainCanvas ref={canvasRef} />\n    </DigitalRainContainer>\n  );\n};\n\nexport default DigitalRainBackground;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}